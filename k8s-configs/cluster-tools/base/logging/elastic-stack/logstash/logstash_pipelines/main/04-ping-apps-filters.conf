filter {
  if ([log_type] == "ping-apps") {
    if ([log] =~ /^\/opt\/out\/instance(\/\w+)?\/log[s]?/) {
      grok {
        match => {
          "log" => [ "^\/opt\/out\/instance(\/\w+)?\/log[s]?\/%{DATA:log_name}(\.log)?(\.out)? %{GREEDYDATA:log_string}" ]
        }
        remove_field => ["log"]
      }
      mutate {
        replace => { "log_type" => "ping_app_logs" }
      }

      if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?") {
        if ([log_name] == "pingaccess_engine_audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{proxyRoundTripMS} ms| %{resource}| %{subject}| %{authMech}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{failedRuleType}| %{failedRuleName}| %{applicationName}| %{resourceName}| %{pathPrefix}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_api_audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{subject}| %{authMech}| %{client}| %{method}| %{requestUri}| %{responseCode}"
            }
            remove_field => ["log_string"]
          }
          mutate {
            gsub => [
              "responseCode", " \n", ""
            ]
            strip => ["responseCode"]
          }
        }
        if ([log_name] == "pingaccess_agent_audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{resource}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{applicationName}| %{resourceName}| %{pathPrefix}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_sideband_client_audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{client}| %{method}| %{requestUri}| %{responseCode}| %{sidebandName}| %{sidebandDecision}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess_sideband_audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{exchangeId}| %{trackingId}| %{roundTripMS} ms| %{resource}| %{client}| %{method}| %{requestUri}| %{responseCode}| %{applicationName}| %{resourceName}| %{pathPrefix}| %{sidebandName}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "pingaccess") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} \[(?:|%{NOTSPACE:exchangeId})\] %{NOTSPACE:className} - %{GREEDYDATA:message}" ]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "audit") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "upgrade") {
          grok {
            match => {
              "log_string" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} %{NOTSPACE:className}:%{NUMBER:position} - %{GREEDYDATA:message}"]
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "upgrade_status") {
          mutate {
            rename => { "log_string" => "message" }
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
          }
        }
      } else if ([kubernetes][container_name] == "pingdirectory" or [kubernetes][container_name] == "pingdatasync") {
        if ([log_name] == "sync-failed-ops" ) {
          mutate {
            rename => { "log_string" => "message" }
          }
        } else if ! ([log_name] == "server" and [log_string] =~ "^\[.*\] [A-Z_]{1,20} ") {
          kv {
            source => "[log_string]"
            value_split => "="
            field_split => " \n"
            include_brackets => true
          }
        } else {
          grok {
            match => { "log_string" => "\[%{DATA:timestamp}\] %{WORD:severity} %{GREEDYDATA:msg}" }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "errors" or [log_name] == "replication" or [log_name] == "server")  {
          grok {
            match => {
              "log_string" => "\[%{DATA:timestamp}\] %{GREEDYDATA}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "failed-ops" or [log_name] == "expensive-write-ops" or [log_name] == "access" ) {
          grok {
            match => { "log_string" => "\[%{DATA:timestamp}\] %{NOTSPACE:ldapType} (?<ldapExtraType>(\w+ )?)%{WORD}=%{GREEDYDATA}" }
            remove_field => ["log_string"]
          }
        }
        if ([kubernetes][container_name] == "pingdirectory" and [log_name] == "failed-ops") {
            mutate {
              replace => { "log_type" => "PD_Failed_Ops"}
            }
        }
        if ([timestamp]) {
            date {
              match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z", "dd/MMM/yyyy:HH:mm:ss Z"]
            }
        }
        mutate{
          gsub => [ "filter", '"', "" ]
          gsub => [ "dn", '"', "" ]
          gsub => [ "requesterIP", "internal", "127.0.0.1" ]
        }
      } else if ([kubernetes][container_name] =~ "pingfederate(-admin)?") {
        if ([log_name] == "admin-api" or [log_name] == "runtime-api") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{user}| %{authType}| %{clientIP}| %{httpMethod}| %{url}| %{status}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "admin-event-detail") {
          dissect {
            mapping => {
              "log_string" => "%{eventDetailId} | %{filename} | %{delta} | %{position} | %{message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "admin") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp} | %{user} | %{roles} | %{ip} | %{component} | %{event} | %{eventDetailId} | %{message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "transaction") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}  | %{host} | %{log_level} | %{event} | Connection ID: %{connectionId} | Virtual Server ID: %{virtualServerId} | %{urn} | %{eventType} | SAML ID: %{samlId} | %{variable_part}"
            }
            remove_field => ["log_string"]
          }
          grok {
            match => {
              "variable_part" => "(Endpoint: %{URI:endpoint})|(SAML Subject: %{DATA:samlSubject} \| %{DATA:binding} \| SignatureStatus: %{DATA:signatureStatus}( \|%{DATA:xmlMessage})?)$"
            }
            remove_field => ["variable_part"]
          }
        }
        if ([log_name] == "audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{trackingId}| %{event}| %{subject}| %{ip} | %{app}| %{connectionId}| %{protocol}| %{host}| %{role}| %{status}| %{adapterId}| %{description}| %{responseTime}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "provisioner-audit") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp}| %{cycleId}| %{channelId}| %{eventType}| %{sourceId}| %{targetId}| %{isSuccess}| %{nonSuccessCause}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "provisioner") {
          grok {
            match => {
              "log_string" => "%{DATA}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}\[%{NOTSPACE:className}\] %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "server") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}( %{DATA:trackingId})? %{WORD:logLevel}[ ]{1,3}\[%{NOTSPACE:className}\] %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "init") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "jvm-garbage-collection") {
          grok {
            match => {
              "log_string" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{NUMBER:secondsFromStart}s\]\[%{WORD:logLevel}\]\[%{DATA:categories}\] %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] =~ "request") {
          grok {
            match => {
              "log_string" => "(%{IPORHOST:clientip})? %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|- )( \"%{NOTSPACE:referer}\")?( \"%{NOTSPACE:useragent}\")?"
            }
            remove_field => ["log_string"]
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "HH:mm:ss,SSS", "dd/MMM/yyyy:HH:mm:ss Z", "yyyy-MM-dd HH:mm:ss,SSS"]
          }
        }
      } else if ([kubernetes][container_name] == "pingcentral") {
        if ([log_name] == "application-ext" or [log_name] == "application") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}%{NOTSPACE:className}:%{NUMBER:position} - %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "monitor") {
          grok {
            match => {
              "log_string" => "%{TIMESTAMP_ISO8601:timestamp} \| %{NOTSPACE:className} %{GREEDYDATA:message}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([log_name] == "application-api") {
          dissect {
            mapping => {
              "log_string" => "%{timestamp} | %{className} %{user} | %{method} | %{client} | %{requestUri} | %{responseCode}"
            }
            remove_field => ["log_string"]
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss" ]
          }
        }
      } else if ([kubernetes][container_name] == "pingdelegator") {
        if ([log_name] == "access") {
          dissect {
            mapping => {
              "log_string" => '%{client} - %{user} [%{timestamp}] "%{method} %{url} HTTP/%{httpVersion}" %{responseCode} %{bodySentBytes} "%{referrer}" "%{userAgent}" "%{httpForwardedFor}"'
            }
            remove_field => ["log_string"]
          }
          date {
            match => [ "timestamp", "dd/MMM/yyyy:H:m:s Z", "yyyy/MM/dd HH:mm:ss" ]
          }
        }
        if ([log_name] == "error") {
          grok {
            match => {
              "log_string" => ["%{DATA:timestamp} \[%{WORD:logLevel}\] %{NUMBER:pid}#%{NUMBER:tid}: (\*%{NUMBER:connectionId} )?%{GREEDYDATA:message}"]
            }
            remove_field => ["log_string"]
          }
          date {
            match => [ "timestamp", "dd/MMM/yyyy:H:m:s Z", "yyyy/MM/dd HH:mm:ss" ]
          }
        }
      }
      # Clone logs for SIEM
      if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?" or [kubernetes][container_name] =~ "pingfederate(-admin)?") {
        clone {
          clones => ["SIEM"]
        }
      }
      if ([type] == "SIEM") {
        mutate {
          rename => { "type" => "log_group" }
        }
        mutate {
          copy => {"@timestamp" => "date"}
        }
      }
    }
    else {
      mutate {
        rename => { "log" => "message" }
      }
    }
  }
}
