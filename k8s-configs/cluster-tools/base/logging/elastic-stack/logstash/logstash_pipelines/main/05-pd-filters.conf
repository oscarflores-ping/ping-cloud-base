filter {
    if ([kubernetes][container_name] =~ "pingdirectory") {
    ### Parse only logs starting from log path.
    ### Everything else(hooks, logs going directly to console, etc) goes to logstash index without any parsing
        if ([log] =~ /^\/opt\/out\/instance\/logs/) {
            grok {
                match => {
                  "log" => [ "^\/opt\/out\/instance(\/\w+)?\/log[s]?\/%{DATA:log_name}(\.log)?(\.out)? %{GREEDYDATA:log_string}" ]
                }
                remove_field => ["log"]
            }
            if ([log_string] == "") {
                drop {}
            }
            mutate {
                add_field => {"[@metadata][index]" => "pd-%{log_name}"}
            }
            if ([log_name] == "access" ) {
                kv {
                  source => "[log_string]"
                  value_split => "="
                  include_brackets => true
                }
                grok {
                  match => { "log_string" => "\[%{DATA:timestamp}\] %{DATA:ldapType} %{WORD}=%{GREEDYDATA}" }
                  remove_field => ["log_string"]
                }
                date {
                  match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z", "dd/MMM/yyyy:HH:mm:ss Z"]
                  target => "app_timestamp"
                  remove_field => ["timestamp"]
                }
                mutate{
                  gsub => [ "filter", '"', "" ]
                  gsub => [ "dn", '"', "" ]
                  gsub => [ "requesterIP", "internal", "127.0.0.1" ]
                  rename => { "msg" => "message" }
                }
                ### Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL
                translate {
                  source => "requesterIP"
                  target => "threat_intel"
                  fallback => "No"
                  dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
                  refresh_behaviour => "replace"
                }
                translate {
                  source => "requesterIP"
                  target => "tor_intel"
                  fallback => "No"
                  dictionary_path => '/enrichment-cache-files/TorNodes.yml'
                  refresh_behaviour => "replace"
                }
                translate {
                  source => "[geoip][country_name]"
                  target => "malicious_country"
                  fallback => "No"
                  dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
                  refresh_behaviour => "replace"
                }
                translate {
                  source => "[geoip][country_name]"
                  target => "known_country"
                  fallback => "No"
                  dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
                  refresh_behaviour => "replace"
                }
                if([malicious_country] == "No" and [known_country] == "No"){
                    mutate {
                        add_field => { "suspicious_country" => "YES" }
                    }
                }
            }
            else if ([log_name] == "server" or [log_name] == "errors" or [log_name] == "replication") {
                grok {
                        match => {
                            "log_string" => [ "\[(?<timestamp>\d{2}\/[A-Za-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2}(?:\.\d+)? \+\d{4})\] %{WORD:severity} %{GREEDYDATA:message}","\[(?<timestamp>\d{2}\/[A-Za-z]{3}\/\d{4}:\d{2}:\d{2}:\d{2}(?:\.\d+)? \+\d{4})\][ ]{1,2}%{WORD}=%{GREEDYDATA}"]
                        }
                        break_on_match => "true"
                }
                if ![severity] {
                    kv {
                        source => "[log_string]"
                        value_split => "="
                        field_split => " \n"
                        include_brackets => true
                    }
                }
                date {
                  match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z", "dd/MMM/yyyy:HH:mm:ss Z"]
                  target => "app_timestamp"
                  remove_field => ["timestamp"]
                }
                if ![tags] {
	                mutate{
	                  remove_field => ["log_string"]
	                }
                }
            }
            else if ([log_name] == "failed-ops" or [log_name] == "expensive-write-ops" or [log_name] == "http-detailed-access"){
                kv {
                  source => "[log_string]"
                  value_split => "="
                  include_brackets => true
                }
                grok {
                  match => { "log_string" => "\[%{DATA:timestamp}\] %{DATA:ldapType} %{WORD}=%{GREEDYDATA}" }
                  remove_field => ["log_string"]
                }
                date {
                  match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z", "dd/MMM/yyyy:HH:mm:ss Z"]
                  target => "app_timestamp"
                  remove_field => ["timestamp"]
                }
            }
        }
    }
}