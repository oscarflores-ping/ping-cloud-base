Initial IRSA_CLUSTER_AUTOSCALER_ANNOTATION_KEY_VALUE: 

echo Initial CLUSTER_ENDPOINT: 
echo Initial KARPENTER_INSTANCE_PROFILE: oscarjflores-primary-KarpenterInstanceProfile
echo Initial KARPENTER_CONTROLLER_IAM_ROLE: oscarjflores-primary-KarpenterControllerRole
echo Initial DEFAULT_CLUSTER_UPTIME: Mon-Fri 08:00-20:00 America/Denver

echo Initial SLACK_CHANNEL: 
echo Initial NON_GA_SLACK_CHANNEL: 

echo Initial APP_RESYNC_SECONDS: 

echo Initial DASHBOARD_REPO_URL: 

echo Initial CERT_RENEW_BEFORE: 

echo ---


########################################################################################################################
# Set the values for each variable.
########################################################################################################################

# Use defaults for other variables, if not present.
export IS_BELUGA_ENV=true

TENANT_DOMAIN=oscarjflores-primary.ping-demo.com
export TENANT_NAME=oscarjflores-primary
export SIZE=x-small

### Region-specific environment variables ###
export REGION=us-west-2
export REGION_NICK_NAME=us-west-2

TENANT_DOMAIN_NO_DOT_SUFFIX=oscarjflores-primary.ping-demo.com
export TENANT_DOMAIN=

export ARTIFACT_REPO_URL=s3://oscarjflores-primary-binarybucket

export PLATFORM_EVENT_QUEUE_NAME=oscarjflores_primary_platform_event_queue.fifo
export CUSTOMER_SSM_PATH_PREFIX=/oscarjflores-primary/pcpt/customer
export CUSTOMER_SSO_SSM_PATH_PREFIX=/oscarjflores-primary/pcpt/customer/sso
export CUSTOMER_TLS_SSM_PATH_PREFIX=/oscarjflores-primary/pcpt/customer/tls
export SERVICE_SSM_PATH_PREFIX=/oscarjflores-primary/pcpt/service

export LAST_UPDATE_REASON=NA

### Base environment variables ###
export IS_MULTI_CLUSTER=false

export PRIMARY_REGION=us-west-2
PRIMARY_TENANT_DOMAIN_NO_DOT_SUFFIX=oscarjflores-primary.ping-demo.com
export PRIMARY_TENANT_DOMAIN=
export SECONDARY_TENANT_DOMAINS=

if true; then
  DERIVED_GLOBAL_TENANT_DOMAIN=global.
else
  DERIVED_GLOBAL_TENANT_DOMAIN=
fi
GLOBAL_TENANT_DOMAIN_NO_DOT_SUFFIX=
export GLOBAL_TENANT_DOMAIN=

export PING_ARTIFACT_REPO_URL=https://ping-artifacts.s3-us-west-2.amazonaws.com

export PD_MONITOR_BUCKET_URL=ssm://oscarjflores-primary/pcpt/service/storage/pd-monitor/uri
export LOG_ARCHIVE_URL=ssm://oscarjflores-primary/pcpt/service/storage/logs/uri
export BACKUP_URL=ssm://oscarjflores-primary/pcpt/service/storage/backup/uri

export MYSQL_SERVICE_HOST=beluga-shared-dev-mysql.cmpxy5bpieb9.us-west-2.rds.amazonaws.com
export MYSQL_USER=ssm://aws/reference/secretsmanager//pcpt/ping-central/dbserver#username
export MYSQL_PASSWORD=ssm://aws/reference/secretsmanager//pcpt/ping-central/dbserver#password

export PING_IDENTITY_DEVOPS_USER=oscarflores@pingidentity.com
export PING_IDENTITY_DEVOPS_KEY=a432db1d-dc2b-7122-0717-b390f9f2ee52

PING_CLOUD_BASE_COMMIT_SHA=e9aefbb79ef10ef4beb5bde188a7921cefa23287
CURRENT_GIT_BRANCH=v2.0-release-branch
if test  = 'HEAD'; then
  CURRENT_GIT_BRANCH=e9aefbb
fi

export CLUSTER_STATE_REPO_URL=ssh://APKA2IO25QZR6JHXSBEU@git-codecommit.us-west-2.amazonaws.com/v1/repos/oscarjflores-primary-cluster-state-repo
CLUSTER_STATE_REPO_NAME=oscarjflores-primary-cluster-state-repo

SERVER_PROFILE_URL_DERIVED=
export SERVER_PROFILE_URL=ssh://APKA2IO25QZR6JHXSBEU@git-codecommit.us-west-2.amazonaws.com/v1/repos/oscarjflores-primary-profile-repo

export K8S_GIT_URL=https://github.com/oscarflores-ping/ping-cloud-base
export K8S_GIT_BRANCH=

export MICROSERVICE_APP_REPO_URL=git@gitlab.corp.pingidentity.com:ping-cloud-private-tenant

export SSH_ID_PUB_FILE=/Users/oscarflores/.ssh/codecommit-oscarflores.pub
export SSH_ID_KEY_FILE=/Users/oscarflores/.ssh/codecommit-oscarflores

export TARGET_DIR=/tmp/sandbox

export ACCOUNT_BASE_PATH=/oscarjflores-primary/pcpt/config/k8s-config/accounts/
export ACCOUNT_PATH_PREFIX=/oscarjflores-primary/pcpt/config/k8s-config/accounts/
export IRSA_BASE_PATH=/oscarjflores-primary/pcpt/irsa-role/
export PGO_BUCKET_URI_SUFFIX=/pgo-bucket/uri
export THANOS_BUCKET_URI_SUFFIX=/service/storage/thanos/uri

# IRSA for ping product pods. The role name is predefined as a part of the interface contract.
export IRSA_PING_ANNOTATION_KEY_VALUE=''
export IRSA_PA_ANNOTATION_KEY_VALUE=''
export IRSA_PD_ANNOTATION_KEY_VALUE=''
export IRSA_PF_ANNOTATION_KEY_VALUE=''
export IRSA_ARGOCD_ANNOTATION_KEY_VALUE=''
export IRSA_CWAGENT_ANNOTATION_KEY_VALUE=''
export IRSA_LOGSTASH_ANNOTATION_KEY_VALUE=''
export IRSA_OPENSEARCH_ANNOTATION_KEY_VALUE=''
export IRSA_THANOS_ANNOTATION_KEY_VALUE=''
export IRSA_CERT_MANAGER_ANNOTATION_KEY_VALUE=''
export IRSA_EXTERNAL_DNS_ANNOTATION_KEY_VALUE=''
export IRSA_INGRESS_ANNOTATION_KEY_VALUE=''
export IRSA_CLUSTER_AUTOSCALER_ANNOTATION_KEY_VALUE=''

export CLUSTER_ENDPOINT=''
export KARPENTER_INSTANCE_PROFILE=oscarjflores-primary-KarpenterInstanceProfile
export KARPENTER_CONTROLLER_IAM_ROLE=oscarjflores-primary-KarpenterControllerRole
export DEFAULT_CLUSTER_UPTIME=Mon-Fri 08:00-20:00 America/Denver

export KARPENTER_ROLE_ANNOTATION_KEY_VALUE=''

export NLB_NGX_PUBLIC_ANNOTATION_KEY_VALUE=''

### FEATURE FLAG DEFAULTS ###
export PF_PROVISIONING_ENABLED=false
export RADIUS_PROXY_ENABLED=false
export ARGOCD_BOOTSTRAP_ENABLED=true
export EXTERNAL_INGRESS_ENABLED=
export HEALTHCHECKS_ENABLED=false
export CUSTOMER_PINGONE_ENABLED=false

### Default environment variables ###
export ECR_REGISTRY_NAME='public.ecr.aws/r2h3l6e4'
export PING_CLOUD_NAMESPACE='ping-cloud'
export MYSQL_DATABASE=pingcentral_oscarjflores_primary
export ARGOCD_CDE_ROLE_SSM_TEMPLATE={env}/argo/role/arn
export ARGOCD_CDE_URL_SSM_TEMPLATE={env}/cluster/private-link/cname

ALL_ENVIRONMENTS='dev test stage prod customer-hub'
SUPPORTED_ENVIRONMENT_TYPES=dev

if [[  == true ]]; then
  # We want to keep the original value of ARGOCD_ENVIRONMENTS from CSR generation, if this is an upgrade
  export ARGOCD_ENVIRONMENTS=
else
  # As of this change (PDO-5017), ENVIRONMENTS is now only used to set ARGOCD_ENVIRONMENTS
  export ARGOCD_ENVIRONMENTS=dev
fi

# Set Slack-related environment variables and override it's values depending on IS_GA value.
get_is_ga_variable '/pcpt/stage/is-ga'

# The Kustomize path to determine configuration to use, either ga or non-ga.
if [[ false == true ]]; then
  export ACCOUNT_TYPE='ga'
else
  export ACCOUNT_TYPE='non-ga'
fi

export NON_GA_SLACK_CHANNEL=nowhere
# If IS_GA=true, use default Slack channel; if IS_GA=false, use NON_GA_SLACK_CHANNEL value as Slack channel.
if false; then
  export SLACK_CHANNEL=p1as-application-oncall
else
  export SLACK_CHANNEL=
fi

NEW_RELIC_LICENSE_KEY=ssm://pcpt/sre/new-relic/java-agent-license-key
if [[  == ssm://* ]]; then
  if ! ssm_value=; then
    echo Warn: 
    echo Setting NEW_RELIC_LICENSE_KEY to unused
    NEW_RELIC_LICENSE_KEY=unused
  else
    NEW_RELIC_LICENSE_KEY=
  fi
fi

export NEW_RELIC_LICENSE_KEY_BASE64=

# Adding an ArgoCD notification slack token
ARGOCD_SLACK_TOKEN_SSM_PATH=ssm://pcpt/argocd/notification/slack/access_token
if ! ssm_value=; then
  echo Warn: 
  echo ARGOCD_SLACK_TOKEN is unset, slack notifications will not work
  echo Using default invalid token
  ARGOCD_SLACK_TOKEN=using_default_invalid_token
else
  ARGOCD_SLACK_TOKEN=
fi

export ARGOCD_SLACK_TOKEN_BASE64=

set_ssh_key_pair

# Get the known hosts contents for the cluster state repo host to pass it into the CD container.
parse_url ssh://APKA2IO25QZR6JHXSBEU@git-codecommit.us-west-2.amazonaws.com/v1/repos/oscarjflores-primary-cluster-state-repo
echo Obtaining known_hosts contents for cluster state repo host: 

if test ! ; then
  # For GitHub, use the 'ecdsa' SSH host key type. The CD tool doesn't work with RSA keys. For all others, use 'rsa'.
  # FIXME: make SSH_HOST_KEY_TYPE overridable in the future. Ref: man ssh-keyscan.
  if echo  | grep -q 'github.com'; then
    SSH_HOST_KEY_TYPE='ecdsa'
  else
    SSH_HOST_KEY_TYPE='rsa'
  fi
  KNOWN_HOSTS_CLUSTER_STATE_REPO=
fi
export KNOWN_HOSTS_CLUSTER_STATE_REPO

# Set some product specific variables
export USER_BASE_DN=dc=example,dc=com
export USER_BASE_DN_2=
export USER_BASE_DN_3=
export USER_BASE_DN_4=
export USER_BASE_DN_5=

export PA_WAS_GCOPTION='-XX:+UseParallelGC'
export PA_MIN_HEAP=1024m
export PA_MAX_HEAP=1024m
export PA_MIN_YGEN=512m
export PA_MAX_YGEN=512m
export PA_GCOPTION='-XX:+UseParallelGC'

export APP_RESYNC_SECONDS=60

export CERT_RENEW_BEFORE=720h0m0s

########################################################################################################################
# Print out the final value being used for each variable.
########################################################################################################################
echo Using TENANT_NAME: oscarjflores-primary
echo Using SIZE: x-small

echo Using SUPPORTED_ENVIRONMENT_TYPES: dev
echo Using IS_MULTI_CLUSTER: false
echo Using PLATFORM_EVENT_QUEUE_NAME: oscarjflores_primary_platform_event_queue.fifo
echo Using CUSTOMER_SSM_PATH_PREFIX: /oscarjflores-primary/pcpt/customer
echo Using CUSTOMER_SSO_SSM_PATH_PREFIX: /oscarjflores-primary/pcpt/customer/sso
echo Using CUSTOMER_TLS_SSM_PATH_PREFIX: /oscarjflores-primary/pcpt/customer/tls
echo Using SERVICE_SSM_PATH_PREFIX: /oscarjflores-primary/pcpt/service
echo Using REGION: us-west-2
echo Using REGION_NICK_NAME: 
echo Using PRIMARY_REGION: us-west-2
echo Using TENANT_DOMAIN: oscarjflores-primary.ping-demo.com
echo Using GLOBAL_TENANT_DOMAIN: 
echo Using PRIMARY_TENANT_DOMAIN: oscarjflores-primary.ping-demo.com
echo Using SECONDARY_TENANT_DOMAINS: 
echo Using PING_CLOUD_NAMESPACE: 

echo Using CLUSTER_STATE_REPO_URL: ssh://APKA2IO25QZR6JHXSBEU@git-codecommit.us-west-2.amazonaws.com/v1/repos/oscarjflores-primary-cluster-state-repo
echo Using SERVER_PROFILE_URL: ssh://APKA2IO25QZR6JHXSBEU@git-codecommit.us-west-2.amazonaws.com/v1/repos/oscarjflores-primary-profile-repo
echo Using CLUSTER_STATE_REPO_PATH: 

echo Using ARTIFACT_REPO_URL: s3://oscarjflores-primary-binarybucket
echo Using PING_ARTIFACT_REPO_URL: https://ping-artifacts.s3-us-west-2.amazonaws.com
echo Using PD_MONITOR_BUCKET_URL: ssm://oscarjflores-primary/pcpt/service/storage/pd-monitor/uri
echo Using LOG_ARCHIVE_URL: ssm://oscarjflores-primary/pcpt/service/storage/logs/uri
echo Using BACKUP_URL: ssm://oscarjflores-primary/pcpt/service/storage/backup/uri

echo Using MYSQL_SERVICE_HOST: beluga-shared-dev-mysql.cmpxy5bpieb9.us-west-2.rds.amazonaws.com
echo Using MYSQL_USER: ssm://aws/reference/secretsmanager//pcpt/ping-central/dbserver#username
echo Using MYSQL_DATABASE: pingcentral_oscarjflores_primary

echo Using PING_IDENTITY_DEVOPS_USER: oscarflores@pingidentity.com

echo Using K8S_GIT_URL: https://github.com/oscarflores-ping/ping-cloud-base
echo Using K8S_GIT_BRANCH: 

echo Using MICROSERVICE_APP_REPO_URL: 

echo Using SSH_ID_PUB_FILE: /Users/oscarflores/.ssh/codecommit-oscarflores.pub
echo Using SSH_ID_KEY_FILE: /Users/oscarflores/.ssh/codecommit-oscarflores

echo Using PF_PROVISIONING_ENABLED: 
echo Using RADIUS_PROXY_ENABLED: 
echo Using ARGOCD_BOOTSTRAP_ENABLED: 
echo Using EXTERNAL_INGRESS_ENABLED: 
echo Using HEALTHCHECKS_ENABLED: false
echo Using CUSTOMER_PINGONE_ENABLED: false
echo Using TARGET_DIR: /tmp/sandbox
echo Using IS_BELUGA_ENV: true

echo Using ACCOUNT_BASE_PATH: /oscarjflores-primary/pcpt/config/k8s-config/accounts/
echo Using PGO_BUCKET_URI_SUFFIX: 
echo Using ARGOCD_CDE_ROLE_SSM_TEMPLATE: 
echo Using ARGOCD_CDE_URL_SSM_TEMPLATE: 
echo Using ARGOCD_ENVIRONMENTS: 

echo Using IRSA_PING_ANNOTATION_KEY_VALUE: 
echo Using IRSA_PA_ANNOTATION_KEY_VALUE: 
echo Using IRSA_PD_ANNOTATION_KEY_VALUE: 
echo Using IRSA_PF_ANNOTATION_KEY_VALUE: 
echo Using IRSA_ARGOCD_ANNOTATION_KEY_VALUE: 
echo Using IRSA_CWAGENT_ANNOTATION_KEY_VALUE: 
echo Using IRSA_LOGSTASH_ANNOTATION_KEY_VALUE: 
echo Using IRSA_OPENSEARCH_ANNOTATION_KEY_VALUE: 
echo Using IRSA_THANOS_ANNOTATION_KEY_VALUE: 
echo Using IRSA_CERT_MANAGER_ANNOTATION_KEY_VALUE: 
echo Using IRSA_EXTERNAL_DNS_ANNOTATION_KEY_VALUE: 
echo Using IRSA_INGRESS_ANNOTATION_KEY_VALUE: 
echo Using IRSA_CLUSTER_AUTOSCALER_ANNOTATION_KEY_VALUE: 

echo Using CLUSTER_ENDPOINT: 
echo Using KARPENTER_INSTANCE_PROFILE: oscarjflores-primary-KarpenterInstanceProfile
echo Using KARPENTER_CONTROLLER_IAM_ROLE: oscarjflores-primary-KarpenterControllerRole
echo Using DEFAULT_CLUSTER_UPTIME: Mon-Fri 08:00-20:00 America/Denver

echo Using KARPENTER_ROLE_ANNOTATION_KEY_VALUE: 

echo Using NLB_NGX_PUBLIC_ANNOTATION_KEY_VALUE: 

echo Using SLACK_CHANNEL: 

echo Using APP_RESYNC_SECONDS: 

echo Using USER_BASE_DN: 

echo Using DASHBOARD_REPO_URL: 

echo Using CERT_RENEW_BEFORE: 

echo ---


########################################################################################################################
# Set variables for massaging files into correct structure for CSR
########################################################################################################################

TEMPLATES_HOME=/Users/oscarflores/personal-cde/ping-cloud-base/code-gen/templates
COMMON_TEMPLATES_DIR=/common
CHUB_TEMPLATES_DIR=/customer-hub
CDE_TEMPLATES_DIR=/cde

# Delete existing target directory and re-create it
rm -rf /tmp/sandbox
mkdir -p /tmp/sandbox

# Next build up the directory structure of the cluster-state repo
BOOTSTRAP_SHORT_DIR='fluxcd'
BOOTSTRAP_DIR=/tmp/sandbox/

CLUSTER_STATE_REPO_DIR=/tmp/sandbox/cluster-state
PROFILE_REPO_DIR=/tmp/sandbox/profile-repo
PROFILES_DIR=/profiles
PROFILE_REPO_MIRRORS=(p1as-pingdirectory)


CUSTOMER_HUB='customer-hub'
PING_CENTRAL='pingcentral'
PING_ACCESS='pingaccess'

mkdir -p 
mkdir -p 
mkdir -p 

cp ./upgrade-cluster-state-wrapper.sh 
cp ./csr-validation.sh 
cp ./seal-secret-values.py 
cp ./upgrade-profile-wrapper.sh 

cp ../.gitignore 
cp ../.gitignore 

echo  > /tmp/sandbox/pcb-commit-sha.txt

set_var THANOS_S3_BUCKET_NAME  /oscarjflores-primary/pcpt/config/k8s-config/accounts/customer-hub 
export THANOS_S3_BUCKET_NAME=

# The SUPPORTED_ENVIRONMENT_TYPES variable can either be the CDE names (e.g. dev, test, stage, prod) or the CHUB name customer-hub,
# or the corresponding branch names (e.g. v1.8.0-dev, v1.8.0-test, v1.8.0-stage, v1.8.0-master, v1.8.0-customer-hub).
# We must handle both cases. Note that the 'prod' environment will have a branch name suffix of 'master'.
for ENV_OR_BRANCH in dev; do
# Run in a sub-shell so the current shell is not polluted with environment variables.
(
  ######################################################################################################################
  # Set the values for each environment specific variable.
  ######################################################################################################################

  if echo  | grep -q ; then
    GIT_BRANCH=

    ENV_OR_BRANCH_SUFFIX=
    ENV=

    export CLUSTER_STATE_REPO_BRANCH=
  else
    test  = 'prod' &&
        GIT_BRANCH='master' ||
        GIT_BRANCH=

    ENV_OR_BRANCH_SUFFIX=
    test  = 'master' &&
        ENV='prod' ||
        ENV=

    # Set the cluster state repo branch to the default CDE branch, i.e. dev, test, stage or master.
    export CLUSTER_STATE_REPO_BRANCH=
  fi

  # Export all the environment variables required for envsubst
  export ENV=
  export ENVIRONMENT_TYPE=${ENV}

  echo ----- to create environment ${ENV}

  # The base URL for kustomization files and environment will be different for each CDE.
  # On migrated customers, we must preserve the size of the customers.
  case  in
    dev | test)
      export KUSTOMIZE_BASE=test
      ;;
    stage | prod | customer-hub)
      export KUSTOMIZE_BASE=prod/x-small
      ;;
  esac

  # Update the Let's encrypt server to use staging/production based on GA customers or the environment type.
  PROD_LETS_ENCRYPT_SERVER='https://acme-v02.api.letsencrypt.org/directory'
  STAGE_LETS_ENCRYPT_SERVER='https://acme-staging-v02.api.letsencrypt.org/directory'

  if test ! ; then
    if false; then
      LETS_ENCRYPT_SERVER=
    else
      case  in
        dev | test | stage)
          LETS_ENCRYPT_SERVER=
          ;;
        prod | customer-hub)
          LETS_ENCRYPT_SERVER=
          ;;
      esac
    fi
  fi
  export LETS_ENCRYPT_SERVER=

  # Set PF variables based on ENV
  if echo  | grep -q 'staging'; then
    export PF_PD_BIND_PORT=1389
    export PF_PD_BIND_PROTOCOL=ldap
    export PF_PD_BIND_USESSL=false
  else
    export PF_PD_BIND_PORT=1636
    export PF_PD_BIND_PROTOCOL=ldaps
    export PF_PD_BIND_USESSL=true
  fi

  # Update the product specific variables based on environment.
  case  in
    dev | test)
      # Set PF variables
      export PF_MIN_HEAP=1536m
      export PF_MAX_HEAP=1536m
      export PF_MIN_YGEN=768m
      export PF_MAX_YGEN=768m

      # Set PA variables
      export PA_WAS_MIN_HEAP=1024m
      export PA_WAS_MAX_HEAP=1024m
      export PA_WAS_MIN_YGEN=512m
      export PA_WAS_MAX_YGEN=512m
      ;;
    stage | prod | customer-hub)
      # Set PF variables
      export PF_MIN_HEAP=3072m
      export PF_MAX_HEAP=3072m
      export PF_MIN_YGEN=1536m
      export PF_MAX_YGEN=1536m

      # Set PA variables
      export PA_WAS_MIN_HEAP=2048m
      export PA_WAS_MAX_HEAP=2048m
      export PA_WAS_MIN_YGEN=1024m
      export PA_WAS_MAX_YGEN=1024m
      ;;
  esac

  true &&
      export CLUSTER_NAME=oscarjflores-primary ||
      export CLUSTER_NAME=

  CLUSTER_NAME_LC=oscarjflores-primary
  export CLUSTER_NAME_LC=

  add_derived_variables

  # TODO: With https://pingidentity.atlassian.net/browse/PP-6073 we should see all of the IRSA roles represented like
  # ArgoCD, then we can change this IRSA SSM fetch code to be consistent
  # shellcheck disable=SC2016
  IRSA_TEMPLATE='eks.amazonaws.com/role-arn: '
  set_var IRSA_CERT_MANAGER_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/cert-manager/arn 
  set_var IRSA_EXTERNAL_DNS_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/external-dns/arn 
  set_var IRSA_PING_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/irsa-ping/arn 
  set_var IRSA_PA_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/pingaccess/arn 
  set_var IRSA_PD_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/pingdirectory/arn 
  set_var IRSA_PF_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/pingfederate/arn 
  set_var IRSA_CWAGENT_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/cloudwatch-agent/arn 
  set_var IRSA_LOGSTASH_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/logstash/arn 
  set_var IRSA_OPENSEARCH_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/opensearch/arn 
  set_var IRSA_THANOS_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/thanos/arn 
  # ArgoCD only for customer-hub
  set_var IRSA_ARGOCD_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/irsa-role/ irsa-argocd/arn 
  set_var IRSA_INGRESS_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/ingress-controller/arn 
  set_var IRSA_CLUSTER_AUTOSCALER_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /irsa-role/cluster-autoscaler/arn 

  # shellcheck disable=SC2016
  KARPENTER_ROLE_TEMPLATE='eks.amazonaws.com/role-arn: arn:aws:iam:::role'
  set_var KARPENTER_ROLE_ANNOTATION_KEY_VALUE  /oscarjflores-primary/pcpt/config/k8s-config/accounts/            /oscarjflores-primary-KarpenterControllerRole

  set_var CLUSTER_ENDPOINT  /oscarjflores-primary/pcpt/config/k8s-config/accounts/ /cluster_endpoint

  # shellcheck disable=SC2016
  NLB_TEMPLATE='service.beta.kubernetes.io/aws-load-balancer-eip-allocations: '
  set_var NLB_NGX_PUBLIC_ANNOTATION_KEY_VALUE  unused //nginx-public           

  set_var PGO_BACKUP_BUCKET_NAME not_set /oscarjflores-primary/pcpt/config/k8s-config/accounts/ 
  # Remove s3:// prefix if present
  export PGO_BACKUP_BUCKET_NAME=



  ######################################################################################################################
  # Print out the final value being used for each environment specific variable.
  ######################################################################################################################
  echo ---
  echo For environment :
  echo Using CLUSTER_STATE_REPO_BRANCH: 
  echo Using ENVIRONMENT_TYPE: 
  echo Using KUSTOMIZE_BASE: 
  echo Using ACCOUNT_TYPE: 
  echo Using LETS_ENCRYPT_SERVER: 
  echo Using CLUSTER_NAME: oscarjflores-primary
  echo Using DNS_ZONE: 
  echo Using PRIMARY_DNS_ZONE: 
  echo Using PGO_BACKUP_BUCKET_NAME: 
  echo Using IRSA_PING_ANNOTATION_KEY_VALUE: 
  echo Using KARPENTER_ROLE_ANNOTATION_KEY_VALUE: 
  echo Using IRSA_INGRESS_ANNOTATION_KEY_VALUE: 
  echo Using NLB_NGX_PUBLIC_ANNOTATION_KEY_VALUE: 
  echo Using CLUSTER_ENDPOINT: 

  ######################################################################################################################
  # Massage files into correct structure for push-cluster-state script
  ######################################################################################################################

  ####### Bootstrap logic ##############################################################################################
  echo Generating bootstrap yaml for 
  ENV_BOOTSTRAP_DIR=/
  mkdir -p 
  cp //common/* 
  if [[  ==  || true == true ]]; then
    cp //customer-hub/* 
    # Copy all files from customer-hub code-gen, except kustomization.yaml to re-use the yaml there and prevent duplication
    find /base/cluster-tools/git-ops -type f ! -name kustomization.yaml | xargs -I {} cp {} 
    # Append the regional env-vars to the common env_vars to make sure all env vars are available for initial bootstrap
    cat /region/git-ops/env_vars >> /env_vars
  else
    cp //cde/* 
  fi
  substitute_vars  ${APP_RESYNC_SECONDS} ${ARGOCD_BOOTSTRAP_ENABLED} ${ARGOCD_CDE_ROLE_SSM_TEMPLATE} ${ARGOCD_CDE_URL_SSM_TEMPLATE} ${ARGOCD_ENVIRONMENTS} ${CLUSTER_ENDPOINT} ${KARPENTER_INSTANCE_PROFILE} ${CLUSTER_STATE_REPO_BRANCH} ${CLUSTER_STATE_REPO_URL} ${CUSTOMER_SSO_SSM_PATH_PREFIX} ${IRSA_ARGOCD_ANNOTATION_KEY_VALUE} ${KARPENTER_ROLE_ANNOTATION_KEY_VALUE} ${K8S_GIT_BRANCH} ${K8S_GIT_URL} ${KNOWN_HOSTS_CLUSTER_STATE_REPO} ${PGO_BACKUP_BUCKET_NAME} ${PING_CLOUD_NAMESPACE} ${REGION_NICK_NAME} ${REGION} ${SLACK_CHANNEL} ${SSH_ID_KEY_BASE64} ${TENANT_DOMAIN} ${TENANT_NAME}
  ####### END Bootstrap logic ##########################################################################################

  # Copy the shared cluster tools and Ping yaml templates into their target directories
  echo Generating tools and ping yaml for 

  ENV_DIR=/
  mkdir -p 

  K8S_CONFIGS_DIR=/k8s-configs
  mkdir -p 

  cp ../k8s-configs/cluster-tools/base/git-ops/git-ops-command.sh 

  # Copy the templates directory files (ex: seal.sh, region-promotion.txt) to the tmp dir
  find  -type f -maxdepth 1 | xargs -I {} cp {} 

  # Copy the common templates first.
  cd 
  rsync -rR * 
  cd - >/dev/null 2>&1

  # Overlay the CHUB or CDE specific templates next.
  if test  = ; then
    cd 
  else
    cd 
  fi

  rsync -rR * 
  cd - >/dev/null 2>&1

  # Rename to the actual region nick name.
  mv /region /

  # Massage files from new microservice architecture
  organize_code_for_csr

  PRIMARY_PING_KUST_FILE=//kustomization.yaml

  # Add IS_BELUGA_ENV to the base values.yaml
  substitute_vars /values-files 'true'

  # Copy around files for Developer CDE before substituting vars
  if true; then
    echo IS_BELUGA_ENV detected, making developer changes to deployment
    # Add IS_BELUGA_ENV to the base env_vars
    BASE_ENV_VARS=/base/env_vars
    echo >> 
    echo IS_BELUGA_ENV=true >> 

    sed -i.bak -e /disable-karpenter/ s
